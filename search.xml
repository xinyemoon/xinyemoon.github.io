<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Junit笔记(一)</title>
      <link href="/2022/09/13/Junit%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
      <url>/2022/09/13/Junit%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Junit简述"><a href="#Junit简述" class="headerlink" title="Junit简述"></a>Junit简述</h3><ul><li>junit是用于java单元测试工具，是一个单元测试框架，适用于白盒测试，也适用于回归测试<ul><li>白合测试: 程序的内部逻辑结构和其他信息对测试人员是公开的</li><li>回归测试: 对软件或者环境修复更正后的“再测试”</li><li>单元测试: 最小的测试模块，</li></ul></li><li>特性<ul><li>用于测试期望结果的断言</li><li>用于共享测试数据的测试工具</li><li>方便组织和运行的测试套件</li><li>图形和文本的测试运行器</li></ul></li></ul><h3 id="编写测试用例步骤"><a href="#编写测试用例步骤" class="headerlink" title="编写测试用例步骤"></a>编写测试用例步骤</h3><ul><li>创建被测对象</li><li>调用被测试方法，输入参数</li><li>判断预期结果是否和真实值一样</li></ul><h3 id="Junit语法"><a href="#Junit语法" class="headerlink" title="Junit语法"></a>Junit语法</h3><h4 id="junit3"><a href="#junit3" class="headerlink" title="junit3"></a>junit3</h4><ul><li>测试类都要继承TestCase</li><li>测试方法都要以test开头</li><li>测试三步骤进行测试</li><li>void setUp()方法每次执行测试方法都先执行一次、<ul><li>可以用来实例化对象</li></ul></li><li>void teardown()方法每次测试方法停止测试的时候都执行一次</li></ul><h4 id="Junit4"><a href="#Junit4" class="headerlink" title="Junit4"></a>Junit4</h4><ul><li><p>@Test</p><ul><li>每个测试方法要被标注，同时必须用public void进行修饰，且不能携带参数</li></ul></li><li><p>@Before</p><ul><li>同setup()一个作用</li></ul></li><li><p>@After</p><ul><li>同teardown()一个作用</li></ul></li><li><p>@BeforeClass</p><ul><li>被标记的方法必须为static，每次类初始化执行一次</li></ul></li><li><p>@AfterClass</p><ul><li>被标记的方法必须为static,每次类停止前执行一次</li></ul></li><li><p>ingore</p><ul><li>忽略被标记的方法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Juint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记(一)</title>
      <link href="/2022/09/13/Git%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
      <url>/2022/09/13/Git%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h3><ul><li>一个开源的分布式版本的控制系统，用于处理项目</li><li>分布式版本库的方式</li><li>不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。</li></ul><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><ul><li>git config<ul><li>专门用来配置或者读取相应的工作环境变量的工具</li></ul></li><li>查看所有的git配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><ul><li>用户配置<ul><li>配置用户名和邮箱</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;XXX&quot;</span><br><span class="line">git config --global user.email &quot;XXX&quot;</span><br></pre></td></tr></table></figure><ul><li>设置文本编辑器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor XXX</span><br></pre></td></tr></table></figure><p>略</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ul><li>克隆git资源作为工作目录</li><li>添加或者修改文件</li><li>如果其他人修改了，你可以更新资源</li><li>在提交前查看修改</li><li>提交修改</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交</li></ul><p>流程图</p><ul><li><img src="https://cdn.jsdelivr.net/gh/xinyemoon/Image//article_img/image-20220913150753435.png" alt="image-20220913150753435"></li></ul><h4 id="Git的工作区，暂存区和版本库"><a href="#Git的工作区，暂存区和版本库" class="headerlink" title="Git的工作区，暂存区和版本库"></a>Git的工作区，暂存区和版本库</h4><ul><li>工作区：我们电脑上能看见的目录</li><li>暂缓区：.&#x2F;git目录下index文件(.git&#x2F;index)中，也称索引</li><li>版本库：工作区的隐藏目录.git</li></ul><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul><li>创建仓库<ul><li>生成.git目录，存放gi需求的数据和资源</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &quot;XXX&quot;</span><br></pre></td></tr></table></figure><ul><li>从git库拷贝项目<ul><li>repository: git仓库</li><li>directory: 本地目录</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repository&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比</p></li><li><p>基本六个命令：git clone、git push、git add、git commit、git checkout、git pull</p></li><li><p>流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/xinyemoon/Image//article_img/image-20220913152424189.png" alt="image-20220913152424189"></p></li><li><p>创建：上面已演示</p></li><li><p>修改和提交</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add //增加文件到缓存区</span><br><span class="line">git status //查看仓看状态</span><br><span class="line">git diff //比较缓存区和工作区文件的不同</span><br><span class="line">git commit //提交到本地仓库</span><br><span class="line">git reset //回退版本</span><br><span class="line">git rm //删除暂存区和工作区的文件</span><br><span class="line">git mv //移动或者重命名工作区文件</span><br></pre></td></tr></table></figure><ul><li>提交日志</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log //查看历史提交记录</span><br><span class="line">git blame &lt;file&gt; //指定查看文件记录</span><br></pre></td></tr></table></figure><ul><li>远程命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote //远程仓库操作</span><br><span class="line">git fetch //获取代码库(不能自动merge)</span><br><span class="line">git merge //获取代码库后整合到当前分支</span><br><span class="line">git push //上传远程代码并合并</span><br><span class="line">git pull //下载远程代码并合并</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个博客</title>
      <link href="/2022/09/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/09/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="本篇文章搭建博客使用的是hexo博客框架，是基于Node-js安装的，同时，本文对发布部署内容都使用git，需要读者自行安装Node和git"><a href="#本篇文章搭建博客使用的是hexo博客框架，是基于Node-js安装的，同时，本文对发布部署内容都使用git，需要读者自行安装Node和git" class="headerlink" title="本篇文章搭建博客使用的是hexo博客框架，是基于Node.js安装的，同时，本文对发布部署内容都使用git，需要读者自行安装Node和git."></a>本篇文章搭建博客使用的是hexo博客框架，是基于Node.js安装的，同时，本文对发布部署内容都使用git，需要读者自行安装Node和git.</h4><h4 id="hexo框架有许多博客主题，本文使用的是Butterfly"><a href="#hexo框架有许多博客主题，本文使用的是Butterfly" class="headerlink" title="hexo框架有许多博客主题，本文使用的是Butterfly"></a>hexo框架有许多博客主题，本文使用的是Butterfly</h4><h4 id="版本：hexo-6-3-0-butterfly-4-4-0"><a href="#版本：hexo-6-3-0-butterfly-4-4-0" class="headerlink" title="版本：hexo:6.3.0; butterfly:4.4.0"></a>版本：hexo:6.3.0; butterfly:4.4.0</h4><h3 id="初步流程"><a href="#初步流程" class="headerlink" title="初步流程"></a>初步流程</h3><ul><li>安装hexo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><ul><li>创建存放目录，建议放非系统盘<ul><li>完成后该目录下会有_config.yml等文件</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &quot;XXX&quot;  </span><br></pre></td></tr></table></figure><ul><li>生成静态html文件<ul><li>该命令是把博客.md等文件生成.html等格式，让用户得以访问</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><ul><li>本地部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>执行完上述命令后，读者可以自行访问git bush界面出现的本地地址，默认是localhost:4000</strong></p><p>其他命令</p><ul><li>清楚静态文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ul><li>生成.md文件<ul><li>读者也可以自行建立，但需要在文件头部加上必要的“标签”，是hexo对文章进行分类的表示，具体请看hexo官方文档</li><li>官方文档地址：<a href="https://hexo.io/zh-cn/index.html">Hexo</a></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;XXX&quot;</span><br></pre></td></tr></table></figure><p>好了，如果但是这样，不够美观，所以我选择用Butterfly主题来美化，读者也可以自行到hexo官方或者github等地找合适的主题安装，不过建议选择主题文档详细和常更新的，方便后续的改造。</p><h4 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h4><ul><li>安装butterfly</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly //版本为4.4.0</span><br></pre></td></tr></table></figure><ul><li>安装pug以及stylus的渲染器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><ul><li>在根目录下的_config.yml文件修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>到此在运行hexo clean,hexo g,hexo s就可以看到本地浏览下的界面更改了</p><h4 id="基本解释"><a href="#基本解释" class="headerlink" title="基本解释"></a>基本解释</h4><ul><li>根目录下的_config.yml为站点配置文件_,_&#x2F;根目录&#x2F;theme&#x2F;Butterfly&#x2F;_config.yml为主题配置文件，对于界面修改都是基于两个文件进行的</li><li>每次写新的博客内容或者新建删除，都要执行 <em>hexo cl,hexo g,hexo s</em>的步骤，后面部署到服务器后把hexo s改为hexo d 即可。</li></ul><h4 id="Github-Page部署"><a href="#Github-Page部署" class="headerlink" title="Github Page部署"></a>Github Page部署</h4><ul><li><p>需要一个github账号，注册流程不多赘述</p></li><li><p>安装扩展，辅助部署</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li>新建一个repostiory，命名为&lt;你的账号&gt;.github.io,这是为了我们的站点能通过域名访问</li><li>获取你本地git的密钥，辅助到github,进行连接，不多赘述</li><li>验证是否成功，出现你的github账号名代表连接成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><ul><li>然后执行hexo cl &amp;&amp; hexo g &amp;&amp; hexo d上传远程仓库</li><li>你就能在&lt;你的账号名&gt;.github.io访问你的站点啦！</li></ul><p><strong>简单的流程到此结束，接下来是阿里云配置</strong></p><h4 id="阿里云域名"><a href="#阿里云域名" class="headerlink" title="阿里云域名"></a>阿里云域名</h4><ul><li><p>在后面，我们不想用尾缀github.io的进行访问，那用其他com,cn等域名行不行?回答是可以的，而且不用域名备案。</p></li><li><p>注册一个阿里云账号，根据需求购买域名，但要注意一下续费收款，有些头年很低，但续费非常高</p><ul><li>阿里云：地址<a href="https://www.aliyun.com/?spm=5176.authc-home.top-nav.dlogo.63834babwfioQc">阿里云-为了无法计算的价值 (aliyun.com)</a></li></ul></li><li><p>注册完成后还要进行身份验证等步骤，具体过程不赘述</p></li><li><p>完成上述步骤后，在域名管理，点击你的域名，在行条上的右手边有解析域名</p></li><li><p>新手直接点新手引导就行，输入你的github那个博客的ip，ip获取可以在git中输入</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping &lt;你的名字&gt;@github.io</span><br></pre></td></tr></table></figure><ul><li>完成后在你的github点击你博客repository的settings，注意不是你个人的头像那里的settings</li><li>找到Page的domins，输入你的阿里云域名并保存，建议勾选下方的https，增加安全性。</li><li>然后在你的repository下建立一个CNAME文件，写入你的阿里云域名，在到你的本地博客的根目录下的source建议同名的文件填上相同的域名，这样做的目的是github会在你更新内容重新写绑定的域名，稳定解析连接</li></ul><h4 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h4><p>你可能发现我并没有对主题页面配置有过多的描述，这是因为在hexo官方文档和Butterfly主题文档都有详细的说明，具体请自己去查看。</p><ul><li><a href="https://hexo.io/zh-cn/index.html">Hexo</a></li><li><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/09/11/test/"/>
      <url>/2022/09/11/test/</url>
      
        <content type="html"><![CDATA[<h3 id="1-图片测试"><a href="#1-图片测试" class="headerlink" title="1.图片测试"></a>1.图片测试</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/xinyemoon/Image/Article/202209202246670.png"><br>2.调试评论区是否能正常运行,测试cover能否正常运行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
